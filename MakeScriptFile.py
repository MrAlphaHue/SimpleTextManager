import time
import openpyxl
import ConstManage
import glob
import base64
import os;


conststr_AllScripts = """
//Warn : Don't change this code.
//Generated By MrHue.SimpleDataConverter

using System;
using UnityEngine;
using System.Collections.Generic;


namespace MrHue.Text
{{
    public enum ELANGUAGE
    {{
        NULL,
{ELANGUAGE}
    }}

    public enum ETexTableType
    {{
        NULL = 0,
        EMPTY = 99,
{ETEXTABLETYPE}
    }}

    public static class TextManager
    {{
        //
        public class TextStruct
        {{
{TEXTSTRUCT}
        }}

        private static Dictionary<int, TextStruct> _txDic_id = new Dictionary<int, TextStruct>();
        private static Dictionary<string, int> _txIdDic_strKey = new Dictionary<string, int>();

        private static ELANGUAGE _curLanguage;
        private static List<ELANGUAGE> _languagePriorities;
        private static bool _ifNoneGetOther = false;

        public static void SetLanguage(ELANGUAGE elanguage)
        {{
            _curLanguage = elanguage;
        }}

        //If getTex is Null , Then Check Other Languages
        public static void SetLanguagePriority(List<ELANGUAGE> elanguages, bool ifNoneGetOther)
        {{
            _languagePriorities.Clear();
            for (int i = 0; i < elanguages.Count; i++)
            {{
                _languagePriorities.Add(elanguages[i]);
            }}

            _ifNoneGetOther = ifNoneGetOther;
        }}


        private static bool IsNone(string str)
        {{
            return str == null ||  str == "None" || str == "";
        }}


        public static string GetText(ETexTableType type, int index)
        {{
            return GetText(type, (int) type + index, _curLanguage);;
        }}

        public static string GetText(ETexTableType type, string strKey)
        {{
            return GetText(type, strKey, _curLanguage);
        }}

        public static string GetText(ETexTableType type, int index, ELANGUAGE langType)
        {{
            string errMsg = string.Format("Text/{{0}}/id_{{1}}/lang_{{2}}", type.ToString(), index.ToString(),
                langType.ToString());
            string _out = GetText((int) type + index, langType);

            if (IsNone(_out))
                return errMsg;

            return _out;
        }}

        public static string GetText(ETexTableType type, string strKey, ELANGUAGE langType)
        {{
            string errMsg = string.Format("Text/{{0}}/strKey_{{1}}/lang_{{2}}", type.ToString(), strKey, langType.ToString());
            strKey = string.Format("{{0}}_{{1}}_{{2}}", "ETEXTTYPE", type.ToString(), strKey);
            string _out = GetText(strKey, langType);
            
            if (IsNone(_out)) 
                return errMsg;

            return _out;
        }}

        private static string GetText(string strKey, ELANGUAGE langType)
        {{
            if (_txIdDic_strKey.ContainsKey(strKey) == false)
                return null;
            return GetText(_txIdDic_strKey[strKey], langType);
        }}
        
        private static string GetText(int index, ELANGUAGE langType)
        {{
            string _out = null;
            if (_txDic_id.ContainsKey(index) == false)
                return null;

            _out = Func_GetTextByLanguage(_txDic_id[index], langType);
            
            if (IsNone(_out) && _ifNoneGetOther == true)
            {{
                _out = GetText_ByLanguagePriority(index, langType);
            }}
            return _out;
        }}

        private static string GetText_ByLanguagePriority(int index, ELANGUAGE baseLangType)
        {{
            string _out = null;
            for (int i = 0; i < _languagePriorities.Count; i++)
            {{
                if (_languagePriorities[i] == baseLangType) continue;
                _out = Func_GetTextByLanguage(_txDic_id[index], _languagePriorities[i]);
                if (IsNone(_out) == false)
                    break;
            }}
            return _out;
        }}

        private static string Func_GetTextByLanguage(TextStruct textStruct, ELANGUAGE langType)
        {{
            string _out = null;
            switch (langType)
            {{
{FUNC_GETTEXTBYLANAUGE}
            }}

            return _out;
        }}
        
        
        // [RuntimeInitializeOnLoadMethod]
        // Must Be Static If You want "RuntimeInitializeOnLoadMethod"
        public static void InIt()
        {{
            _txDic_id.Clear();
            _txIdDic_strKey.Clear();

{INIT}
        }}

        private static void InIt(ETexTableType type)
        {{
            //
            var text_asset = Resources.Load("BinaryTextData/TexTable" + type.ToString()) as TextAsset;
            string getBytestring = System.Text.Encoding.UTF8.GetString(text_asset.bytes); //U2gi
            byte[] byte1 = Convert.FromBase64String(getBytestring);
            string final_str = System.Text.Encoding.UTF8.GetString(byte1);

            //strs0 is id,strkey,en,kr
            string[] strs = final_str.Split(new string[] {{"\\t\\t"}}, StringSplitOptions.None);

            //
            string firstKey = strs[0];
            string[] firstKeys = firstKey.Split('\\t');

            //
            int start_index = (int) type;
            string base_str = string.Format("{{0}}_{{1}}_", "ETEXTTYPE", type.ToString());

            //
            for (int i = 1; i < strs.Length; i++)
            {{
                string element = strs[i];
                string[] elements = element.Split('\\t');

                if (elements.Length != firstKeys.Length)
                {{
                    Debug.LogError(elements.Length + "   ,   " + firstKeys.Length);
                    throw new ArgumentException("strs");
                }}

                //
                TextStruct textStruct = new TextStruct();
                int index = start_index + int.Parse(elements[0]);
                string strKey = base_str + elements[1];

                //
                for (int idx_el = 2; idx_el < elements.Length; idx_el++)
                {{
                    string keyValue = firstKeys[idx_el].ToUpper();
                    string strValue = elements[idx_el];
                    // Debug.LogError("strValue : " + strValue);
                    switch (keyValue)
                    {{
{SET_TEXTSTRUCT}
                        default:
                            Debug.LogError("KeyValue Error : " + keyValue);
                            return;
                    }}
                }}

                //
                if (_txDic_id.ContainsKey(index))
                {{
                    Debug.LogError("TextGenerateError_Multiple Key Index");
                    return;
                }}

                _txDic_id.Add(index, textStruct);

                if (elements[1] != "None")
                {{
                    if (_txIdDic_strKey.ContainsKey(strKey))
                    {{
                        Debug.LogError("TextGenerateError_Multiple StrKey Index");
                        return;
                    }}
                    _txIdDic_strKey.Add(strKey, index);
                }}
            }}
        }}
    }}
}}
"""

def makeScriptByXlsx(work_book_structs):
    if len(ConstManage.languages) != len(ConstManage.languages_comment):
        print("Error:Languages Lenght is not Same")
        return

    str_ELANGUAGE = ""
    str_TEXTSTRUCT = ""
    str_FUNC_GETTEXTBYLANAUGE = ""
    str_SET_TEXTSTRUCT = ""
    for idx_lang in range(0, len(ConstManage.languages)):
        language = ConstManage.languages[idx_lang]
        language_comment = ConstManage.languages_comment[idx_lang]

        str_ELANGUAGE += "\t\t" + language.upper() + ',\n'
        str_TEXTSTRUCT += "\t\t\tpublic string " + language.lower() + " = null; \t //" + language_comment + "\n"
        str_FUNC_GETTEXTBYLANAUGE += "\t\t\t\tcase ELANGUAGE." + language.upper() + ":" + "\n"
        str_FUNC_GETTEXTBYLANAUGE += "\t\t\t\t_out = textStruct." + language.lower() + ";\n"
        str_FUNC_GETTEXTBYLANAUGE += "\t\t\t\tbreak;\n"
        str_SET_TEXTSTRUCT += "\t\t\t\t\t\tcase \"" + language.upper() + "\":\n"
        str_SET_TEXTSTRUCT += "\t\t\t\t\t\ttextStruct." + language.lower() + " = strValue;\n";
        str_SET_TEXTSTRUCT += "\t\t\t\t\t\tbreak;\n"

    str_ETEXTABLETYPE = ""
    str_INIT = ""
    index_enum = 100;
    for wb_struct in work_book_structs:
        for sheet_struct in wb_struct.sheet_structs:
            enum_name = wb_struct.base_filename.replace("TexTable", "") + sheet_struct.sheet.title
            str_ETEXTABLETYPE += "\t\t" + enum_name  + " = "+ str(index_enum) + ",\n"
            str_INIT += "\t\t\t" + "InIt(ETexTableType." + enum_name  + ");\n"
            index_enum += sheet_struct.max_row - 1

    conststr_AllScripts
    str_script = conststr_AllScripts.format(ELANGUAGE = str_ELANGUAGE, TEXTSTRUCT = str_TEXTSTRUCT, \
     FUNC_GETTEXTBYLANAUGE = str_FUNC_GETTEXTBYLANAUGE, SET_TEXTSTRUCT = str_SET_TEXTSTRUCT, \
     ETEXTABLETYPE = str_ETEXTABLETYPE, INIT = str_INIT)

    file = open(ConstManage.script_path + "/" + "TextManager.cs", "w+")
    file.write(str_script)
    file_proeject = open(ConstManage.project_script_path + "/" + "TextManager.cs", "w+")
    file_proeject.write(str_script)

    # str_generate = conststr_comment + conststr_namespace    
    # str_scriptname = table_name + ".cs"
    # allsheet = wb_obj.worksheets;


    # str_allSheets = ""
    # str_common = ""
    # str_common_sheet_assign = ""
    # str_common_sheet_getallvars = ""
    # str_common_sheet_init = ""
    # for sheet_obj in allsheet:
    #     if("Temp" in sheet_obj.title):
    #         continue

    #     str_sheet = ""
    #     str_sheet_data_struct = ""
    #     str_sheet_data_init = ""
    #     str_sheet_data_debug = ""

    #     #string_a += sheet_obj.title + '\t\t'
    #     m_column = sheet_obj.max_column
    #     for i in range(1, m_column + 1):
    #         if(sheet_obj.cell(row = 1 , column = i).value is None or sheet_obj.cell(row = 2 , column = i).value is None):
    #             continue  
    #         cell_type = str(sheet_obj.cell(row = 1 , column = i).value).upper()
    #         cell_varName = str(sheet_obj.cell(row = 2 , column = i).value);

    #         print ("cell_type is " + cell_type)
    #         print ("cell_valName is " + cell_varName)
    #         if cell_type == 'INT': 
    #             str_sheet_data_struct += '\t\t' + conststr_initInt.format(name = cell_varName)
    #             str_sheet_data_init   += '\t\t\t\t' + conststr_data_cvtoInt.format(cell_varName, i-1)
    #             str_sheet_data_debug += '\t\t' + conststr_debugInt.format(name = cell_varName)
    #         elif cell_type == "LONG":
    #             str_sheet_data_struct += '\t\t' + conststr_initLong.format(name = cell_varName)
    #             str_sheet_data_init   += '\t\t\t\t' + conststr_data_cvtoLong.format(cell_varName, i-1)
    #             str_sheet_data_debug += '\t\t' + conststr_debugLong.format(name = cell_varName)
    #         elif cell_type == "FLOAT":
    #             str_sheet_data_struct += '\t\t' + conststr_initFloat.format(name = cell_varName)
    #             str_sheet_data_init   += '\t\t\t\t' + conststr_data_cvtoFloat.format(cell_varName, i-1)
    #             str_sheet_data_debug += '\t\t' + conststr_debugFloat.format(name = cell_varName)
    #         elif cell_type == "DOUBLE":
    #             str_sheet_data_struct += '\t\t' + conststr_initDouble.format(name = cell_varName)
    #             str_sheet_data_init   += '\t\t\t\t' + conststr_data_cvtoDouble.format(cell_varName, i-1)
    #             str_sheet_data_debug += '\t\t' + conststr_debugDouble.format(name = cell_varName)
    #         elif cell_type == "STRING":
    #             str_sheet_data_struct += '\t\t' + conststr_initString.format(name = cell_varName)
    #             str_sheet_data_init   += '\t\t\t\t' + conststr_data_cvtoString.format(cell_varName, i-1)
    #             str_sheet_data_debug += '\t\t' + conststr_debugString.format(name = cell_varName)
    #         elif cell_type == "BOOL":
    #             str_sheet_data_struct += '\t\t' + conststr_initBool.format(name = cell_varName)
    #             str_sheet_data_init   += '\t\t\t\t' + conststr_data_cvtoBool.format(cell_varName,   i-1)
    #             str_sheet_data_debug += '\t\t' + conststr_debugBool.format(name = cell_varName)
    #         elif cell_type == "XINT":
    #             str_sheet_data_struct += '\t\t' + conststr_initXInt.format(name = cell_varName)
    #             str_sheet_data_init   += '\t\t\t\t' + conststr_data_cvtoXint.format(cell_varName, i-1)
    #             str_sheet_data_debug += '\t\t' + conststr_debugXint.format(name = cell_varName)
    #         else:
    #             print("Custom Warn : type is anavaliable")
    #     str_sheet = conststr_sheetRegion.format(sheet_name = sheet_obj.title, data_struct = str_sheet_data_struct, data_init = str_sheet_data_init, data_debug = str_sheet_data_debug)
    #     str_allSheets += str_sheet;
    #     str_common_sheet_assign += conststr_commonRegion_sheetAssign.format(sheet_name = sheet_obj.title)
    #     str_common_sheet_init += conststr_commonRegion_sheetInit.format(sheet_name = sheet_obj.title)

    # str_common = conststr_commonRegion.format(sheet_assign = str_common_sheet_assign, sheet_init = str_common_sheet_init)
    # str_generate += conststr_tableClass.format(table_name = table_name, content = str_allSheets + str_common)
    # ##
    # file = open(ConstManage.script_path + "/" + str_scriptname, "w+")
    # file.write(str_generate)
    # file_proeject = open(ConstManage.project_script_path + "/" + str_scriptname, "w+")
    # file_proeject.write(str_generate)
